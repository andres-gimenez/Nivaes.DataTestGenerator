name: Publish Release

on:
  release:
    types:
      - released
      - prereleased
    #types: [published]
    #types: [released]
    #types: [prereleased]
    #types: [deleted]

jobs:
  publish_release:
    runs-on: ubuntu-18.04

    steps:
    - name: Read version
      uses: nivaes/get-version@master
      
    - name: Version
      run: echo ${{ steps.get_version.outputs.version }}
      
#     - id: get_version
#       uses: battila7/get-version-action@v2

    - run: echo ${{ steps.get_version.outputs.version }}

    - run: echo ${{ steps.get_version.outputs.version-without-v }}
      
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Publish nuget
      run: echo $"{{ github.event.release.assets[].browser_download_url }}"
    
    - name: Download packages
      run: |
        file=${{ github.event.release.assets[0].browser_download_url }}
        echo $file
        curl $file --output github.event.release.assets[0].name
        
    - name: Download packages2
      run: |
        file=${{ github.event.release.assets[1].browser_download_url }}
        echo $file
        curl $file --output github.event.release.assets[1].name
        
#     - name: Build
#       run: dotnet build --configuration Release -p:Version=${{ env.VERSION_NUMBER }} 

#     - name: Test
#       run: dotnet test --configuration Release --no-build --verbosity normal

#     - name: Pack
#       if: github.event_name == 'push' || (github.event_name != 'pull_request')
#       run: dotnet pack --configuration Release --no-build --verbosity normal --output ./Artifacts/ -p:Version=${{ env.VERSION_NUMBER }} 

#     - name: Create Release
#       if: github.event_name == 'push' || (github.event_name != 'pull_request')
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: release/${{ env.VERSION_NUMBER }}.2 
#         release_name: Release Version (2) ${{ env.VERSION_NUMBER }}.2
#         body: |
#           Automatic Release ${{ env.VERSION_NUMBER }}  
#           - Release automatically generated.
#         draft: true
#         prerelease: false

#     - name: Upload Release Asset
#       if: github.event_name == 'push' || (github.event_name != 'pull_request')
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: ./Artifacts/Nivaes.Async.${{ env.VERSION_NUMBER }}.nupkg
#         asset_name: Nivaes.Async.${{ env.VERSION_NUMBER }}.nupkg
#         asset_content_type: application/octet-stream

    - name: release
      if: github.event_name.types == 'released'
      run: echo Release

    - name: release
      if: github.event_name.types == 'prereleased'
      run: echo Prereleased
