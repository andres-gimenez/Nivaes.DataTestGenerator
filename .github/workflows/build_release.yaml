name: Build Release

on:
  #create:
  #  branches:              # Not filter wiht branches name of chreate.
  #  - 'release/**'
  push:
    branches:
    - 'release/**'
    paths-ignore:
    - '**/*.md'
  #pull_request:
  #  types: [opened, synchronize, reopened]
  #  branches: [ master ]
  #  paths-ignore:
  #  - '**/*.md'

jobs:
  build_release:

    runs-on: ubuntu-18.04

    steps:
    - name: Get Version
      uses: nivaes/get-version@master
      id: get_version
        
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"

    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJson(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: echo "$MATRIX_CONTEXT"

    - name: Checkout
      uses: actions/checkout@v2

    - name: Branch name
      uses: nelonoel/branch-name@v1

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-rc.1.20379.13

    - name: Build
      run: dotnet build --configuration Release -p:Version=${{ steps.get_version.outputs.version }} 

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Pack
      if: github.event_name == 'push' || (github.event_name != 'pull_request')
      run: dotnet pack --configuration Release --no-build --verbosity normal --output ./Artifacts/ -p:Version=${{ steps.get_version.outputs.version }} 

    - name: Create Release
      if: github.event_name == 'push' || (github.event_name != 'pull_request')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release/v${{ steps.get_version.outputs.version }}
        release_name: Release Version ${{ steps.get_version.outputs.version }}
        body: |
          Automatic Release ${{ steps.get_version.outputs.version }}  
          - Release automatically generated.
        draft: true
        prerelease: false

    - name: Dump matrix context
      run: echo ${{ steps.create_release.outputs.upload_url }}

    - name: Upload Release Asset
      uses: nivaes/upload-release-assets@master
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         targets: ./Artifacts/**/*.nupkg
         
#     - name: Upload Release Asset (Nivaes.DataTestGenerator)
#       if: github.event_name == 'push' || (github.event_name != 'pull_request')
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: ./Artifacts/Nivaes.DataTestGenerator.${{ steps.get_version.outputs.version }}.nupkg
#         asset_name: Nivaes.DataTestGenerator.${{ steps.get_version.outputs.version }} .nupkg
#         asset_content_type: application/octet-stream

#     - name: Upload Release Asset (Nivaes.DataTestGenerator.XUnit)
#       if: github.event_name == 'push' || (github.event_name != 'pull_request')
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: ./Artifacts/Nivaes.DataTestGenerator.XUnit.${{ steps.get_version.outputs.version }}.nupkg
#         asset_name: Nivaes.DataTestGenerator.XUnit.${{ steps.get_version.outputs.version }}.nupkg
#         asset_content_type: application/octet-stream

    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJson(steps) }}
      run: echo "$STEPS_CONTEXT"
